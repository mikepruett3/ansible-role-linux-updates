---
# Debian tasks file for ansible-role-linux-updates

- name: "Install needrestart package, if not already installed"
  ansible.builtin.apt:
    name: "needrestart"
    state: present

- name: "Modify needrestart.conf file"
  ansible.builtin.lineinfile:
    path: /etc/needrestart/needrestart.conf
    regexp: '^#.nrconf\{restart\}'
    line: "$nrconf{restart} = 'a';"
    state: present

- name: "Deploy 01-dpkg_options configuration file"
  ansible.builtin.template:
    src: "dpkg-options.j2"
    dest: /etc/apt/apt.conf.d/01-dpkg-option
    owner: root
    group: root
    mode: '0640'

- name: "Collect list of packages to update"
  ansible.builtin.shell:
    cmd: apt list --upgradable
  register: output

- name: "Set upgradable Fact"
  ansible.builtin.set_fact:
    updates: "{{ output.stdout }}"
  when:
    - output is defined
    - output.changed

- name: "Update Package Cache"
  ansible.builtin.apt:
      update_cache: yes

- name: "Install latest updates"
  ansible.builtin.apt:
    name: "*"
    state: latest
    dpkg_options: 'force-confold,force-confdef'
  register: regular_upgrade

- name: "Perform a Full upgrade"
  ansible.builtin.apt:
    upgrade: full
  register: full_upgrade

- name: "Perform a Dist upgrade"
  ansible.builtin.apt:
    upgrade: dist
  register: dist_upgrade

- name: "Check if there is a new Release (Ubuntu)"
  ansible.builtin.shell:
    cmd: do-release-upgrade -c
  register: release
  #ignore_errors: true
  failed_when:
    - release.rc >= 2
  when:
    - regular_upgrade.changed == false
    - full_upgrade.changed == false
    - dist_upgrade.changed == false
    - ansible_facts['distribution'] == 'Ubuntu'

- name: "Set fact for release (true)"
  ansible.builtin.set_fact:
    release: true
  when:
    - release.rc == 0
    - regular_upgrade.changed == false
    - full_upgrade.changed == false
    - dist_upgrade.changed == false
    - ansible_facts['distribution'] == 'Ubuntu'

- name: "Perform a Release upgrade (Ubuntu)"
  ansible.builtin.shell:
    cmd: do-release-upgrade -f DistUpgradeViewNonInteractive
  ignore_errors: true
  when:
    - release | bool
    - regular_upgrade.changed == false
    - full_upgrade.changed == false
    - dist_upgrade.changed == false
    - ansible_facts['distribution'] == 'Ubuntu'

- name: "Deploy kernel_check.sh script"
  ansible.builtin.template:
    src: "kernel_check_debian.j2"
    dest: /usr/local/bin/kernel_check.sh
    owner: root
    group: root
    mode: '0770'

- name: "Check if reboot is required, after patching kernel"
  ansible.builtin.shell:
    cmd: /usr/local/bin/kernel_check.sh
  register: reboot
  failed_when:
    - reboot.rc >= 2

- name: "Reboot host, if kernel update installed"
  ansible.builtin.reboot:
  when:
    - reboot is defined
    - reboot.rc != 0

- name: "Remove dependencies that are no longer required"
  ansible.builtin.apt:
    autoremove: yes
    purge: true

- name: "Clean Package Cache"
  ansible.builtin.apt:
    autoclean: yes
