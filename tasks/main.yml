---
# tasks file for ansible-role-linux-updates

- name: "Include OS-specific variables"
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ansible_distribution}}_{{ansible_distribution_major_version}}.yaml'
        - '{{ansible_distribution}}.yaml'
        - '{{ansible_os_family}}.yaml'
        - default.yaml
      paths:
        - 'vars'

- name: "Install yum-utils package, if not already installed (RedHat)"
  ansible.builtin.package:
    name: "yum-utils"
    state: present
  when:
    - ansible_facts['os_family'] == 'RedHat'

- name: "Install needrestart package, if not already installed (Debian)"
  ansible.builtin.apt:
    name: "needrestart"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Modify needrestart.conf file (Debian)"
  ansible.builtin.lineinfile:
    path: /etc/needrestart/needrestart.conf
    regexp: "#$nrconf{restart} = 'i';"
    line: "$nrconf{restart} = 'a';"
    state: present
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Install latest updates (yum)"
  ansible.builtin.yum:
    name: "*"
    state: latest
    update_cache: yes
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Install latest updates (dnf)"
  ansible.builtin.dnf:
    name: "*"
    state: latest
    allowerasing: yes
    update_cache: yes
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Install latest updates (apt)"
  ansible.builtin.apt:
    name: "*"
    state: latest
    update_cache: yes
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Deploy kernel_check.sh script"
  ansible.builtin.template:
    src: "{{ kernel_check_script }}"
    dest: /usr/local/bin/kernel_check.sh
    owner: root
    group: root
    mode: '0770'

- name: "Check if reboot is required, after patching kernel"
  ansible.builtin.command: /usr/local/bin/kernel_check.sh
  register: reboot

- name: "Reboot host, if kernel update installed"
  ansible.builtin.reboot:
  when: reboot.stdout.find("reboot") != -1

- name: "Collect list of installed packages"
  shell: "{{ patching_journal }}"
  register: notes

- name: "Email notification of installed packages"
  mail:
    host: "{{ smtp_host }}"
    port: "{{ smtp_port }}"
    to: "{{ recipient }}"
    from: "{{ sender }}"
    subject: "Patching Report: {{ inventory_hostname }} has been successfully updated"
    body: "{{ notes.stdout }}"
    secure: never
  delegate_to: localhost
  when:
    - notes.stdout.find("-- No entries --") == -1
    - notes.stdout != ""

#- name: "Collect number of installed kernels"
#  shell: rpm -qa kernel | wc -l
#  register: kernels

#- name: "Remove old kernels after reboot (RHEL)"
#  command: "{{ package_cleanup }}"
#  ignore_errors: yes
#  when:
#    - kernels.stdout | int > 2
#    - ansible_facts['os_family'] == 'RedHat'

- name: "Remove dependencies that are no longer required (yum)"
  ansible.builtin.yum:
    autoremove: yes
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Remove dependencies that are no longer required (yum)"
  ansible.builtin.dnf:
    autoremove: yes
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Remove dependencies that are no longer required (apt)"
  ansible.builtin.apt:
    autoremove: yes
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Clean Package Cache (yum)"
  ansible.builtin.shell:
    cmd: yum clean all
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Clean Package Cache (dnf)"
  ansible.builtin.shell:
    cmd: dnf clean all
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Clean Package Cache (apt)"
  ansible.builtin.apt:
    #autoclean: yes
    clean: yes
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

#- name: "Cleanup Apt Cache (apt)"
#  ansible.builtin.shell: apt-get -y clean
#  when:
#    - ansible_facts['pkg_mgr'] == 'apt'